import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';
import { ArrowLeft, Users, DollarSign, Tag, TrendingUp, Eye, Calendar, CreditCard, Building2, Wallet, Plus } from 'lucide-react';
import CashoutModal from '../components/CashoutModal';
import CreateCommissionModal from '../components/CreateCommissionModal';

interface ResellerProfile {
  id: string;
  full_name: string;
  phone: string | null;
  email?: string;
  created_at: string;
}

interface PromoCode {
  id: string;
  promo_code_text: string;
  coupon_id: string;
  discount_percent: number | null;
  discount_amount: number | null;
  currency: string | null;
  is_active: boolean;
  usage_count: number;
  total_discount_amount: number;
  created_at: string;
  commission_rate: number;
}

interface Client {
  id: string;
  full_name: string;
  phone: string | null;
  email?: string;
  source: string;
  created_at: string;
  subscription_status?: string | null;
  restaurant_count?: number;
  menu_count?: number;
}

interface Commission {
  id: string;
  user_id: string;
  client_name: string;
  subscription_id: string;
  promo_code_text: string;
  commission_amount: number;
  commission_rate: number;
  currency: string;
  status: string;
  period_start: string;
  period_end: string;
  created_at: string;
  paid_at: string | null;
}

export default function ResellerDetail() {
  const { resellerId } = useParams<{ resellerId: string }>();
  const { userRole } = useAuth();
  const navigate = useNavigate();
  const [reseller, setReseller] = useState<ResellerProfile | null>(null);
  const [clients, setClients] = useState<Client[]>([]);
  const [promoCodes, setPromoCodes] = useState<PromoCode[]>([]);
  const [commissions, setCommissions] = useState<Commission[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'clients' | 'promoCodes' | 'commissions'>('clients');
  const [showCashoutModal, setShowCashoutModal] = useState(false);
  const [showCreateCommissionModal, setShowCreateCommissionModal] = useState(false);
  const [editingPromoCode, setEditingPromoCode] = useState<string | null>(null);
  const [newCommissionRate, setNewCommissionRate] = useState<string>('');
  const [clientSubscriptions, setClientSubscriptions] = useState<Array<{
    subscription_id: string;
    client_name: string;
    promo_code: string;
    status: string;
  }>>([]);

  useEffect(() => {
    if (resellerId) {
      if (userRole === 'admin') {
        fetchResellerData();
      } else if (userRole) {
        console.log('Access denied: User role is', userRole, 'but admin required');
        setLoading(false);
      }
    }
  }, [resellerId, userRole]);

  const fetchResellerData = async () => {
    try {
      console.log('Fetching reseller data for ID:', resellerId);

      const [profileRes, emailRes, promoCodesRes, commissionsRes] = await Promise.all([
        supabase
          .from('user_profiles')
          .select('*')
          .eq('id', resellerId)
          .maybeSingle(),
        supabase.rpc('get_user_email', {
          target_user_id: resellerId
        }),
        supabase.rpc('get_reseller_promo_codes', {
          target_reseller_id: resellerId
        }),
        supabase.rpc('get_reseller_commissions', {
          target_reseller_id: resellerId,
          commission_status_filter: null
        })
      ]);

      console.log('Profile response:', profileRes);
      console.log('Email response:', emailRes);
      console.log('Promo codes response:', promoCodesRes);
      console.log('Commissions response:', commissionsRes);

      if (profileRes.error) {
        console.error('Error fetching reseller profile:', profileRes.error);
      }

      if (profileRes.data) {
        console.log('Setting reseller data:', profileRes.data);
        setReseller({
          ...profileRes.data,
          email: emailRes.data || 'N/A'
        });
      } else {
        console.error('No profile data found for reseller ID:', resellerId);
      }

      if (promoCodesRes.data) {
        setPromoCodes(promoCodesRes.data);
      }

      if (commissionsRes.data) {
        setCommissions(commissionsRes.data);
      }

      const { data: clientsData, error: clientsError } = await supabase
        .from('user_profiles')
        .select('id, full_name, phone, source, created_at')
        .eq('reseller_id', resellerId);

      if (clientsError) {
        console.error('Error fetching clients:', clientsError);
      }

      if (clientsData) {
        const subscriptionsForCommissions: typeof clientSubscriptions = [];

        const clientsWithDetails = await Promise.all(
          clientsData.map(async (client) => {
            const [emailRes, paymentRes, restaurantsRes] = await Promise.all([
              supabase.rpc('get_user_email', { target_user_id: client.id }),
              supabase.rpc('get_user_payment_details', { target_user_id: client.id }),
              supabase
                .from('restaurants')
                .select('id')
                .eq('user_id', client.id)
            ]);

            let menuCount = 0;
            if (restaurantsRes.data && restaurantsRes.data.length > 0) {
              const restaurantIds = restaurantsRes.data.map(r => r.id);
              const { count } = await supabase
                .from('menus')
                .select('*', { count: 'exact', head: true })
                .in('restaurant_id', restaurantIds);
              menuCount = count || 0;
            }

            if (paymentRes.data?.subscription?.subscription_id && paymentRes.data?.subscription?.promo_code?.code) {
              subscriptionsForCommissions.push({
                subscription_id: paymentRes.data.subscription.subscription_id,
                client_name: client.full_name,
                promo_code: paymentRes.data.subscription.promo_code.code,
                status: paymentRes.data.subscription.status || 'unknown'
              });
            }

            return {
              ...client,
              email: emailRes.data || 'N/A',
              subscription_status: paymentRes.data?.subscription?.status || null,
              restaurant_count: restaurantsRes.data?.length || 0,
              menu_count: menuCount
            };
          })
        );

        setClients(clientsWithDetails);
        setClientSubscriptions(subscriptionsForCommissions);
      }
    } catch (error) {
      console.error('Error fetching reseller data:', error);
    } finally {
      setLoading(false);
    }
  };

  const goBack = () => {
    navigate('/admin');
  };

  const viewClientDetail = (clientId: string) => {
    navigate(`/admin/client/${clientId}`);
  };

  const calculateTotalEarnings = () => {
    return commissions.reduce((sum, comm) => sum + comm.commission_amount, 0);
  };

  const calculatePendingEarnings = () => {
    return commissions
      .filter(comm => comm.status === 'pending')
      .reduce((sum, comm) => sum + comm.commission_amount, 0);
  };

  const calculatePaidEarnings = () => {
    return commissions
      .filter(comm => comm.status === 'paid')
      .reduce((sum, comm) => sum + comm.commission_amount, 0);
  };

  const handleCashout = async (selectedCommissions: string[], payoutAmount: number) => {
    try {
      const { data, error } = await supabase.rpc('mark_commissions_as_paid', {
        p_reseller_id: resellerId,
        p_commission_ids: selectedCommissions,
        p_payout_amount: payoutAmount
      });

      if (error) throw error;

      await fetchResellerData();
      alert('Payout processed successfully!');
    } catch (error: any) {
      console.error('Error processing payout:', error);
      throw new Error(error.message || 'Failed to process payout');
    }
  };

  const handleCreateCommission = async (subscriptionId: string, paymentAmount: number) => {
    try {
      const { data, error } = await supabase.rpc('create_commission_for_subscription', {
        p_subscription_id: subscriptionId,
        p_payment_amount: paymentAmount,
        p_currency: 'eur'
      });

      if (error) throw error;

      await fetchResellerData();
      alert('Commission created successfully!');
    } catch (error: any) {
      console.error('Error creating commission:', error);
      alert(error.message || 'Failed to create commission');
    }
  };

  const handleUpdateCommissionRate = async (promoCodeId: string, rate: number) => {
    try {
      const { error } = await supabase
        .from('reseller_promo_codes')
        .update({ commission_rate: rate })
        .eq('id', promoCodeId);

      if (error) throw error;

      await fetchResellerData();
      setEditingPromoCode(null);
      setNewCommissionRate('');
      alert('Commission rate updated successfully!');
    } catch (error: any) {
      console.error('Error updating commission rate:', error);
      alert('Failed to update commission rate');
    }
  };

  const getSubscriptionBadge = (status: string | null | undefined) => {
    if (!status) {
      return (
        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700">
          No Subscription
        </span>
      );
    }

    switch (status) {
      case 'active':
      case 'trialing':
        return (
          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
            Active
          </span>
        );
      case 'past_due':
        return (
          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
            Past Due
          </span>
        );
      case 'canceled':
        return (
          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
            Canceled
          </span>
        );
      default:
        return (
          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700">
            {status}
          </span>
        );
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-gray-600">Loading...</div>
      </div>
    );
  }

  if (!reseller) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Reseller Not Found</h1>
          <button
            onClick={goBack}
            className="text-blue-600 hover:text-blue-700"
          >
            Go Back
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 py-8">
        <button
          onClick={goBack}
          className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-6"
        >
          <ArrowLeft className="w-5 h-5" />
          Back to Admin Dashboard
        </button>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-3xl font-bold text-gray-900">{reseller.full_name}</h1>
            <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
              Reseller
            </span>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
              <span className="text-gray-500">Email:</span>
              <p className="font-medium text-gray-900">{reseller.email}</p>
            </div>
            <div>
              <span className="text-gray-500">Phone:</span>
              <p className="font-medium text-gray-900">{reseller.phone || 'N/A'}</p>
            </div>
            <div>
              <span className="text-gray-500">Joined:</span>
              <p className="font-medium text-gray-900">
                {new Date(reseller.created_at).toLocaleDateString()}
              </p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 mb-1">Total Clients</p>
                <p className="text-3xl font-bold text-gray-900">{clients.length}</p>
              </div>
              <Users className="w-12 h-12 text-blue-500" />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 mb-1">Active Promo Codes</p>
                <p className="text-3xl font-bold text-gray-900">
                  {promoCodes.filter(p => p.is_active).length}
                </p>
              </div>
              <Tag className="w-12 h-12 text-green-500" />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 mb-1">Total Earnings</p>
                <p className="text-3xl font-bold text-green-600">
                  ${(calculateTotalEarnings() / 100).toFixed(2)}
                </p>
              </div>
              <DollarSign className="w-12 h-12 text-green-500" />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 mb-1">Pending Earnings</p>
                <p className="text-3xl font-bold text-orange-600">
                  ${(calculatePendingEarnings() / 100).toFixed(2)}
                </p>
              </div>
              <TrendingUp className="w-12 h-12 text-orange-500" />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600 mb-1">Paid Out</p>
                <p className="text-3xl font-bold text-blue-600">
                  ${(calculatePaidEarnings() / 100).toFixed(2)}
                </p>
              </div>
              <Wallet className="w-12 h-12 text-blue-500" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          <div className="border-b border-gray-200">
            <nav className="flex -mb-px">
              <button
                onClick={() => setActiveTab('clients')}
                className={`px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'clients'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <div className="flex items-center gap-2">
                  <Users className="w-5 h-5" />
                  Clients ({clients.length})
                </div>
              </button>
              <button
                onClick={() => setActiveTab('promoCodes')}
                className={`px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'promoCodes'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <div className="flex items-center gap-2">
                  <Tag className="w-5 h-5" />
                  Promo Codes ({promoCodes.length})
                </div>
              </button>
              <button
                onClick={() => setActiveTab('commissions')}
                className={`px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'commissions'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <div className="flex items-center gap-2">
                  <DollarSign className="w-5 h-5" />
                  Commissions ({commissions.length})
                </div>
              </button>
            </nav>
          </div>

          <div className="p-6">
            {activeTab === 'clients' && (
              <div>
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-semibold text-gray-900">Client List</h2>
                  {clientSubscriptions.length > 0 && (
                    <button
                      onClick={() => setShowCreateCommissionModal(true)}
                      className="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
                    >
                      <Plus className="w-4 h-4" />
                      Create Commission
                    </button>
                  )}
                </div>
                {clients.length === 0 ? (
                  <div className="text-center py-12">
                    <Users className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500">No clients yet</p>
                  </div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Client
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Subscription
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Restaurants
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Menus
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Joined
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Actions
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {clients.map((client) => (
                          <tr key={client.id} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div>
                                <div className="font-medium text-gray-900">{client.full_name}</div>
                                <div className="text-sm text-gray-500">{client.email}</div>
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              {getSubscriptionBadge(client.subscription_status)}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="flex items-center gap-1 text-sm text-gray-900">
                                <Building2 className="w-4 h-4" />
                                {client.restaurant_count || 0}
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                              {client.menu_count || 0}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {new Date(client.created_at).toLocaleDateString()}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              <button
                                onClick={() => viewClientDetail(client.id)}
                                className="inline-flex items-center gap-2 px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                              >
                                <Eye className="w-4 h-4" />
                                View Details
                              </button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            )}

            {activeTab === 'promoCodes' && (
              <div>
                <h2 className="text-xl font-semibold text-gray-900 mb-4">Promo Codes</h2>
                {promoCodes.length === 0 ? (
                  <div className="text-center py-12">
                    <Tag className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500">No promo codes created yet</p>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {promoCodes.map((promo) => (
                      <div
                        key={promo.id}
                        className={`border rounded-lg p-6 ${
                          promo.is_active
                            ? 'border-green-200 bg-green-50'
                            : 'border-gray-200 bg-gray-50'
                        }`}
                      >
                        <div className="flex items-center justify-between mb-4">
                          <h3 className="text-2xl font-bold text-gray-900">
                            {promo.promo_code_text}
                          </h3>
                          <span
                            className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                              promo.is_active
                                ? 'bg-green-100 text-green-800'
                                : 'bg-gray-100 text-gray-700'
                            }`}
                          >
                            {promo.is_active ? 'Active' : 'Inactive'}
                          </span>
                        </div>
                        <div className="space-y-2 text-sm">
                          <div className="flex justify-between">
                            <span className="text-gray-600">Discount:</span>
                            <span className="font-semibold text-gray-900">
                              {promo.discount_percent
                                ? `${promo.discount_percent}%`
                                : `${promo.discount_amount} ${promo.currency?.toUpperCase()}`}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Times Used:</span>
                            <span className="font-semibold text-gray-900">
                              {promo.usage_count}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Total Discount:</span>
                            <span className="font-semibold text-gray-900">
                              ${(promo.total_discount_amount / 100).toFixed(2)}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-600">Created:</span>
                            <span className="text-gray-900">
                              {new Date(promo.created_at).toLocaleDateString()}
                            </span>
                          </div>
                          <div className="flex justify-between items-center pt-2 border-t border-gray-200 mt-2">
                            <span className="text-gray-600">Commission Rate:</span>
                            {editingPromoCode === promo.id ? (
                              <div className="flex items-center gap-2">
                                <input
                                  type="number"
                                  step="0.01"
                                  value={newCommissionRate}
                                  onChange={(e) => setNewCommissionRate(e.target.value)}
                                  className="w-20 px-2 py-1 text-sm border border-gray-300 rounded"
                                  placeholder="10.00"
                                />
                                <button
                                  onClick={() => handleUpdateCommissionRate(promo.id, parseFloat(newCommissionRate))}
                                  className="text-xs px-2 py-1 bg-green-600 text-white rounded hover:bg-green-700"
                                >
                                  Save
                                </button>
                                <button
                                  onClick={() => {
                                    setEditingPromoCode(null);
                                    setNewCommissionRate('');
                                  }}
                                  className="text-xs px-2 py-1 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
                                >
                                  Cancel
                                </button>
                              </div>
                            ) : (
                              <div className="flex items-center gap-2">
                                <span className="font-semibold text-gray-900">
                                  {promo.commission_rate != null ? `${promo.commission_rate}%` : 'Not set'}
                                </span>
                                <button
                                  onClick={() => {
                                    setEditingPromoCode(promo.id);
                                    setNewCommissionRate(promo.commission_rate != null ? promo.commission_rate.toString() : '10.00');
                                  }}
                                  className="text-xs text-blue-600 hover:text-blue-700"
                                >
                                  Edit
                                </button>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {activeTab === 'commissions' && (
              <div>
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-semibold text-gray-900">Commission History</h2>
                  <div className="flex items-center gap-4">
                    <div className="flex gap-4 text-sm">
                      <div>
                        <span className="text-gray-600">Paid: </span>
                        <span className="font-semibold text-green-600">
                          ${(calculatePaidEarnings() / 100).toFixed(2)}
                        </span>
                      </div>
                      <div>
                        <span className="text-gray-600">Pending: </span>
                        <span className="font-semibold text-orange-600">
                          ${(calculatePendingEarnings() / 100).toFixed(2)}
                        </span>
                      </div>
                    </div>
                    {commissions.some(c => c.status === 'pending') && (
                      <button
                        onClick={() => setShowCashoutModal(true)}
                        className="inline-flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm font-medium"
                      >
                        <Wallet className="w-4 h-4" />
                        Process Cashout
                      </button>
                    )}
                  </div>
                </div>
                {commissions.length === 0 ? (
                  <div className="text-center py-12">
                    <DollarSign className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500">No commissions yet</p>
                  </div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Client
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Promo Code
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Amount
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Rate
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Status
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Period
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {commissions.map((commission) => (
                          <tr key={commission.id} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="font-medium text-gray-900">
                                {commission.client_name || 'N/A'}
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-blue-100 text-blue-800">
                                {commission.promo_code_text}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className="font-semibold text-gray-900">
                                ${(commission.commission_amount / 100).toFixed(2)}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {commission.commission_rate}%
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span
                                className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                                  commission.status === 'paid'
                                    ? 'bg-green-100 text-green-800'
                                    : commission.status === 'pending'
                                    ? 'bg-orange-100 text-orange-800'
                                    : 'bg-red-100 text-red-800'
                                }`}
                              >
                                {commission.status}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              <div className="flex items-center gap-1">
                                <Calendar className="w-4 h-4" />
                                {new Date(commission.period_start).toLocaleDateString()} -{' '}
                                {new Date(commission.period_end).toLocaleDateString()}
                              </div>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <CashoutModal
        isOpen={showCashoutModal}
        onClose={() => setShowCashoutModal(false)}
        onConfirm={handleCashout}
        pendingCommissions={commissions
          .filter(c => c.status === 'pending')
          .map(c => ({
            id: c.id,
            client_name: c.client_name,
            commission_amount: c.commission_amount,
            currency: c.currency,
            period_start: c.period_start,
            period_end: c.period_end
          }))}
        totalPending={calculatePendingEarnings()}
        currency="eur"
      />

      <CreateCommissionModal
        isOpen={showCreateCommissionModal}
        onClose={() => setShowCreateCommissionModal(false)}
        onConfirm={handleCreateCommission}
        clientSubscriptions={clientSubscriptions}
      />
    </div>
  );
}
